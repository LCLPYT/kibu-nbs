plugins {
	id 'fabric-loom' version '1.5-SNAPSHOT'
	id 'maven-publish'
	id 'gradle-build-utils' version '1.7.0'
}

Properties props = buildUtils.loadProperties('publish.properties')

version = buildUtils.gitVersion()
group = project.maven_group

base {
    archivesName = project.archives_base_name
}

repositories {
    maven {
        url "https://repo.lclpnet.work/repository/internal"
    }
}

loom {
    splitEnvironmentSourceSets()

    mods {
        "kibu-nbs" {
            sourceSet sourceSets.main
            sourceSet sourceSets.client
        }
    }
}

sourceSets {
    api {}

    main {
        compileClasspath += api.getOutput()
        runtimeClasspath += api.getOutput()
    }

    client {
        compileClasspath += api.getOutput()
        runtimeClasspath += api.getOutput()
    }

    test {
        compileClasspath += client.getOutput() + api.getOutput()
        runtimeClasspath += client.getOutput() + api.getOutput()
    }
}

dependencies {
    minecraft "com.mojang:minecraft:${project.minecraft_version}"
    mappings "net.fabricmc:yarn:${project.yarn_mappings}:v2"
    modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"

    modImplementation "net.fabricmc.fabric-api:fabric-api:${project.fabric_version}"
    include(modImplementation("work.lclpnet.mods.kibu:kibu-hooks:${project.kibu_hooks_version}"))

    implementation(apiImplementation("work.lclpnet.mods.kibu:kibu-hook-api:${project.kibu_hook_api_version}"))
    apiImplementation(implementation('org.jetbrains:annotations:24.0.0'))

    testImplementation "net.fabricmc:fabric-loader-junit:${project.loader_version}"
}

test {
    useJUnitPlatform()
}

afterEvaluate {
    configurations {
        testCompileClasspath.extendsFrom(minecraftCommonNamedCompile)
        testRuntimeClasspath.extendsFrom(minecraftCommonNamedRuntime)
        testCompileClasspath.extendsFrom(minecraftClientOnlyNamedCompile)
        testRuntimeClasspath.extendsFrom(minecraftClientOnlyNamedRuntime)
        testRuntimeClasspath.extendsFrom(modRuntimeClasspathClientMapped)
    }
}

processResources {
	inputs.property "version", project.version

	filesMatching("fabric.mod.json") {
		expand "version": project.version
	}
}

tasks.withType(JavaCompile).configureEach {
	it.options.release.set(17)
}

java {
    // Loom will automatically attach sourcesJar to a RemapSourcesJar task and to the "build" task
    withSourcesJar()

    sourceCompatibility = JavaVersion.VERSION_17
    targetCompatibility = JavaVersion.VERSION_17
}

jar {
	from("LICENSE") {
		rename { "${it}_${project.base.archivesName.get()}"}
	}
}

// configure the maven publication
publishing {
    publications {
        mavenJava(MavenPublication) {
            artifactId = project.base.archivesName.get()

            from components.java

            pom {
                name = 'kibu-nbs'
                description = 'A fabric mod for playing .nbs files'
            }
        }
    }

    // automatically use DEPLOY_URL, DEPLOY_USER and DEPLOY_PASSWORD environment variables
    // or mavenHost, mavenUser and mavenPassword from props
    buildUtils.setupPublishRepository(repositories, props)
}